<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-07-03T18:06:52-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Forrest Williams</title><subtitle>Data Projects and Visualizations</subtitle><author><name>Forrest Williams</name><email>samuel.forrest.williams@gmail.com</email></author><entry><title type="html">Voronoi-Based Voter Assignment</title><link href="http://localhost:4000/dashboards/2025/06/30/votecenter-voronoi.html" rel="alternate" type="text/html" title="Voronoi-Based Voter Assignment" /><published>2025-06-30T00:00:00-04:00</published><updated>2025-06-30T00:00:00-04:00</updated><id>http://localhost:4000/dashboards/2025/06/30/votecenter-voronoi</id><content type="html" xml:base="http://localhost:4000/dashboards/2025/06/30/votecenter-voronoi.html"><![CDATA[<style>
.page__content {
  font-size: 0.8rem;
}
</style>

<h2 id="better-voter-protection-prioritization-maricopa-example">Better Voter Protection Prioritization (Maricopa Example)</h2>
<p><em>Around 60% of Arizonans (2 million voters) live in Maricopa County, which was served by 256 Vote Centers in the 2024 Election.</em></p>

<div class="tableauPlaceholder" id="viz1750525153359" style="position: relative; width: 100%; height: 700px; overflow: hidden; border: 2px solid #ccc; border-radius: 4px;">
    <noscript>
      <a href="#">
        <img alt="Dashboard 1" src="https://public.tableau.com/static/images/Ma/MaricopaCountyPrecinctv_VoteCenterAggregation/Dashboard1_rss.png" style="border: none; width:100%;" />
      </a>
    </noscript>
    <object class="tableauViz" style="display:none; width:100%; height:700px; overflow: hidden;">
      <param name="host_url" value="https%3A%2F%2Fpublic.tableau.com%2F" />
      <param name="embed_code_version" value="3" />
      <param name="site_root" value="" />
      <param name="name" value="MaricopaCountyPrecinctv_VoteCenterAggregation/Dashboard1" />
      <param name="tabs" value="no" />
      <param name="toolbar" value="yes" />
      <param name="static_image" value="https://public.tableau.com/static/images/Ma/MaricopaCountyPrecinctv_VoteCenterAggregation/Dashboard1/1.png" />
      <param name="animate_transition" value="yes" />
      <param name="display_static_image" value="yes" />
      <param name="display_spinner" value="yes" />
      <param name="display_overlay" value="yes" />
      <param name="display_count" value="yes" />
      <param name="language" value="en-US" />
      <param name="showVizHome" value="no" />
      <param name="scrollbars" value="no" />
    </object>
  </div>
<script>
    var divElement = document.getElementById('viz1750525153359');
    var vizElement = divElement.getElementsByTagName('object')[0];
    
    vizElement.style.width = '100%';
    vizElement.style.height = '700px';
    
    var scriptElement = document.createElement('script');
    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';
    vizElement.parentNode.insertBefore(scriptElement, vizElement);
  </script>

<h3 id="why-i-rebuilt-this-dashboard">Why I (Re)built This Dashboard</h3>
<ul>
  <li><strong>Any voter can vote at any polling polling place</strong><br />
Most of Arizona’s 15 Counties, (including its most-populous, Maricopa) use a Vote Center model that lets voters cast ballots at any site in their county of residence, without regard to precinct boundaries.</li>
  <li><strong>Precinct-distance from Vote Center falls short</strong><br />
 The previous way Vote Centers were prioritized was by assigning ALL of a precinct’s voters to the closest votecenter based on that precinct’s centroid point. This left some polling places overserved and others ignored.</li>
  <li><strong>True “nearest” mapping</strong><br />
We needed a way to see which vote centers served the most voters, based on where they actually live, rather than their precinct residence.</li>
</ul>

<h3 id="voronoi-based-service-areas">Voronoi-Based Service Areas</h3>
<p>By generating Voronoi polygons around all 256 vote-center points and then spatially joining the latitude and longitude of 2 million voters by address, we quickly assign each voter to their true nearest site (without running 2 million × 256 distance checks)</p>

<h3 id="exploring-the-map">Exploring the Map</h3>

<h4 id="most-populous-precinct---roser-precinct">Most Populous Precinct - Roser Precinct</h4>
<p><em>To fit within Tableau Public’s mark‐count limit, each point on the map represents ~20 voters.</em><br />
Take the most populous precinct in the county, Roser Precinct. In the previous model, all of its voters would have been assigned to the <em>Church of Latter Day Saints</em>. But as you can see, voters in Roser precinct are split pretty significantly among three nearby vote centers, none of which lie within the precinct itself.</p>

<div class="feature__wrapper">

  
    <div class="feature__item">
      <div class="archive__item">
        
          <div class="archive__item-teaser">
            <img src="/assets/images/posts/vc-voronoi/roser-precinct.png" alt="Roser Precinct voter distribution" />
            
          </div>
        

        <div class="archive__item-body">
          

          
            <div class="archive__item-excerpt">
              <p>Roser Precinct</p>

            </div>
          

          
        </div>
      </div>
    </div>
  
    <div class="feature__item">
      <div class="archive__item">
        
          <div class="archive__item-teaser">
            <img src="/assets/images/posts/vc-voronoi/roser-split.png" alt="Roser precinct split across vote centers" />
            
          </div>
        

        <div class="archive__item-body">
          

          
            <div class="archive__item-excerpt">
              <p>Roser Precinct’s Closest Vote Centers split</p>

            </div>
          

          
        </div>
      </div>
    </div>
  
    <div class="feature__item">
      <div class="archive__item">
        
          <div class="archive__item-teaser">
            <img src="/assets/images/posts/vc-voronoi/roser-split-bar.png" alt="Bar chart showing voter distribution" />
            
          </div>
        

        <div class="archive__item-body">
          

          
            <div class="archive__item-excerpt">
              <p>Extent of voter split between Vote Centers</p>

            </div>
          

          
        </div>
      </div>
    </div>
  

</div>

<!-- #### Most Populous Vote Center - Academies at South Mountain
*The Academies at South Mountain* center serves nearly five times more voters than the population of the largest single precinct. But a centroid‐based method could leave it with zero assigned precincts (if no centroid falls closest) or bundle entire precincts arbitrarily, obscuring the true spread of voters it actually serves.
![academies-sm.png](/assets/images/posts/vc-voronoi/academies-sm.png)   -->
<h4>Most Populous Vote Center - Academies at South Mountain</h4>
<div style="display: grid; grid-template-columns: 1fr 2fr; gap: 2rem; align-items: center; margin: 2rem 0;">
  <div>
    <img src="/assets/images/posts/vc-voronoi/academies-sm.png" alt="Academies at South Mountain" style="width: 100%; height: auto;" />
  </div>
  <div>
    <p><em>The Academies at South Mountain</em> center serves nearly five times more voters than the population of the largest single precinct. But a centroid‐based method could leave it with zero assigned precincts (if no centroid falls closest) or bundle entire precincts arbitrarily, obscuring the true spread of voters it actually serves.</p>
  </div>
</div>

<!-- Add additional screenshots here as needed -->

<h3 id="impact--takeaways">Impact &amp; Takeaways</h3>
<ul>
  <li><strong>Resource reallocation</strong><br />
Instead of funneling volunteers and legal teams based on precinct proximity, the VoPro team can now focus on the centers actually serving the most people. And by assigning each voter to a Vote Center, we can prioritize the demographic groups we are targeting or serving certain volunteers with language skills to the appropriate places.</li>
  <li><strong>Faster, cheaper, scalable</strong><br />
a voronoi spatial join to the lat/longs of only the voters that live within that shape beats millions of distance queries or expensive API calls.</li>
</ul>

<hr />

<h2 id="details--methodology">Details &amp; Methodology</h2>

<ul>
  <li><strong>Data workaround</strong><br />
Because the Arizona voter file is not publicly availalbe, this tableau dashboard demonstration uses a parcel point workaround: Maricopa County parcel points were randomly labeled Democrat or Republican based on each precinct’s 2024 vote share. Parcel points are from <a href="https://data-maricopa.opendata.arcgis.com/datasets/dbf139379db946e1b10a2f15672c142d/about">Maricopa GIS Open Data</a>, and the precinct-level results come from the <a href="https://github.com/nytimes/presidential-precinct-map-2024">NYT 2024 GitHub repository</a>.</li>
</ul>

<hr />]]></content><author><name>Forrest Williams</name><email>samuel.forrest.williams@gmail.com</email></author><category term="dashboards" /><category term="python" /><category term="geopandas" /><category term="QGIS" /><category term="tableau" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Abundance NY City Council Endorsements</title><link href="http://localhost:4000/maps/2025/06/27/abundance-endorsements.html" rel="alternate" type="text/html" title="Abundance NY City Council Endorsements" /><published>2025-06-27T00:00:00-04:00</published><updated>2025-06-27T00:00:00-04:00</updated><id>http://localhost:4000/maps/2025/06/27/abundance-endorsements</id><content type="html" xml:base="http://localhost:4000/maps/2025/06/27/abundance-endorsements.html"><![CDATA[<style>
.page__content {
  font-size: 0.9rem;
}

.code-container {
  max-width: 600px;
  margin: 20px 0;
  border: 1px solid #ddd;
  border-radius: 4px;
  background: #f8f9fa;
}

.code-header {
  background: #e9ecef;
  padding: 8px 12px;
  border-bottom: 1px solid #ddd;
  font-size: 14px;
  font-weight: bold;
}

.code-content {
  padding: 12px;
  font-family: 'Courier New', monospace;
  font-size: 12px;
  line-height: 1.4;
  overflow-x: auto;
  max-height: 300px;
  overflow-y: auto;
}

/* Spreadsheet table styling */
.spreadsheet-table {
  border-collapse: collapse;
  font-family: Arial, sans-serif;
  font-size: 13px;
  margin: 20px 0;
  width: 100%;
  overflow-x: auto;
  display: block;
  white-space: nowrap;
}

.spreadsheet-table thead {
  display: table-header-group;
}

.spreadsheet-table tbody {
  display: table-row-group;
}

.spreadsheet-table tr {
  display: table-row;
}

.spreadsheet-table th,
.spreadsheet-table td {
  display: table-cell;
  border: 1px solid #d0d7de;
  padding: 6px 8px;
  text-align: left;
  vertical-align: top;
  max-width: 200px;
  overflow: hidden;
  text-overflow: ellipsis;
}

.spreadsheet-table th {
  background-color: #f6f8fa;
  font-weight: 600;
  color: #24292f;
  position: sticky;
  top: 0;
}

.spreadsheet-table td {
  background-color: #ffffff;
}

.spreadsheet-table tr:nth-child(even) td {
  background-color: #f6f8fa;
}

.spreadsheet-table tr:hover td {
  background-color: #fff8dc;
}

/* Column specific widths */
.col-district { width: 60px; }
.col-endorsed { width: 80px; }
.col-name { width: 120px; }
.col-incumbency { width: 90px; }
.col-tagline { width: 180px; }
.col-photo { width: 80px; }
.col-campaign { width: 100px; }
.col-neighborhoods { width: 250px; }
.col-tooltip { width: 300px; }
.col-also { width: 120px; }
.col-dont { width: 100px; }
</style>

<!-- 1) DATAWRAPPER MAP – Plot | Text -->
<div style="display: grid; grid-template-columns: 50% 50%; gap: 1.5rem; margin-bottom: 2rem;">
  <!-- Left: Datawrapper -->
  <div style="position:relative; max-width:100%; overflow: hidden; box-shadow: 0 6px 20px rgba(0,0,0,0.25); max-height: 780px;">
    <iframe title="Abundance NY City Council Endorsements Map" aria-label="Map" id="datawrapper-chart-0xyMH" src="https://datawrapper.dwcdn.net/0xyMH/7/" scrolling="no" frameborder="0" style="width: 100%; max-width: 100%; border: none;" height="780" data-external="1">
    </iframe>
    <script type="text/javascript">
      !function(){"use strict";window.addEventListener("message",(function(e){
        if(void 0!==e.data["datawrapper-height"]){
          var iframes=document.querySelectorAll("iframe");
          for(var key in e.data["datawrapper-height"]){
            for(var i=0;i<iframes.length;i++){
              if(iframes[i].contentWindow===e.source){
                iframes[i].style.height=e.data["datawrapper-height"][key]+"px";
              }
            }
          }
        }
      }))}();
    </script>
  </div>
  <!-- Right: caption -->
  <div>
    <p style="margin-top: 2rem;"> I made this map for Abundance NY ahead of the NYC primaries to share a fun infograph of councilor endorsements, especially for down-ballot races where people may not know the candidates as well. This was mostly an excuse to use Datawrapper, since it is so universally beloved (for good reason!). Also, I'm fully on-board with the Abundance agenda, and have been attending a lot of Abundance NY meetups since returning to NYC.</p> 
    
    <p>This was a quick map to build, but I did have to simplify geometries with GeoPandas and convert the shapefile for use in Datawrapper. It also got a lot of views!</p>
    <div style="border-left: 4px solid #007acc; background-color: #f0f8ff; padding: 1em; margin-top: 2rem;">

  <p><strong>Datawrapper has some prerequisites if you're using your own maps.</strong></p>
  <p><u>Prerequisites</u><br />
  To upload your map in Datawrapper, it needs to...<br />
  – be in the TopoJSON or GeoJSON format<br />
  – be smaller than 2MB<br />
  – use the WGS-84 coordinate system (EPSG:4326 projection)</p>
</div>

</div>




</div>
<div>
  <p>So the first step is to go to NYC City Planning to get the council district shapes:<br />
  <a href="https://www.nyc.gov/content/planning/pages/resources/datasets/city-council" target="_blank" rel="noopener">
    NYC Planning
  </a>.
  You can either download them as shapefiles, or just copy the url for "View GeoJSON" if you want to work with GeoJSON off the jump (I'll go through both ways).</p>

  <p>Below, I'll walk through all the steps, but if you want to open the walk-through in a MyBinder session and play with the code, you can do that here (takes a minute to load):</p>

  <p>
    <a href="https://mybinder.org/v2/gh/samforwill/nycc-map/HEAD?urlpath=/doc/tree/nycc_districts.ipynb" target="_blank" rel="noopener" style="background-color: #007acc; color: white; padding: 0.5em 1em; border-radius: 4px; text-decoration: none;">
      Launch MyBinder Notebook →
    </a>
  </p>
</div>
<!-- {: .small} -->
<h3 id="nyc-city-council-districts---geopandas-simplification-walkthrough">NYC City Council Districts - GeoPandas Simplification Walkthrough</h3>

<h5 id="setup">Setup</h5>

<p>First, import GeoPandas, pandas, and os.<br />
I’ll load the City Council boundaries into a GeoDataFrame directly from the GeoJSON endpoint we got from NYC Planning (url) just to show how to do that. Then I’ll follow up in the next cell with loading them as shapefiles. I’ll also verify the coordinate reference system (CRS), since Datawrapper requires EPSG 4326 (WGS 84).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">geopandas</span> <span class="k">as</span> <span class="n">gpd</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="n">url</span> <span class="o">=</span> <span class="s">"https://services5.arcgis.com/GfwWNkhOj9bNBqoJ/arcgis/rest/services/NYC_City_Council_Districts/FeatureServer/0/query?where=1=1&amp;outFields=*&amp;outSR=4326&amp;f=pgeojson"</span>
<span class="n">nycc_gdf</span> <span class="o">=</span> <span class="n">gpd</span><span class="p">.</span><span class="n">read_file</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
<span class="n">nycc_gdf</span><span class="p">.</span><span class="n">crs</span>
</code></pre></div></div>

<blockquote>
  <p>&lt;Geographic 2D CRS: EPSG:4326&gt;<br />
Name: WGS 84<br />
Axis Info [ellipsoidal]:</p>
  <ul>
    <li>Lat[north]: Geodetic latitude (degree)</li>
    <li>Lon[east]: Geodetic longitude (degree)<br />
Area of Use:</li>
    <li>name: World.</li>
    <li>bounds: (-180.0, -90.0, 180.0, 90.0)<br />
Coordinate Operation:</li>
    <li>name: unknown</li>
    <li>method: unknown<br />
Datum: World Geodetic System 1984 ensemble</li>
    <li>Ellipsoid: WGS 84</li>
    <li>Prime Meridian: Greenwich</li>
  </ul>
</blockquote>

<p>Great! So that’s already projected in EPSG:4326. I already know it’s 5.5MB, so we’d still have to do simplification to meet Datawrapper’s file size limit, but I’ll show how with the shapefile below.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nycc_gdf</span> <span class="o">=</span> <span class="n">gpd</span><span class="p">.</span><span class="n">read_file</span><span class="p">(</span><span class="s">"data/nycc_25b/nycc.shp"</span><span class="p">)</span>
<span class="n">nycc_gdf</span><span class="p">.</span><span class="n">crs</span>
</code></pre></div></div>

<blockquote>
  <p>&lt;Projected CRS: EPSG:2263&gt;<br />
Name: NAD83 / New York Long Island (ftUS)<br />
Axis Info [cartesian]:</p>
  <ul>
    <li>X[east]: Easting (US survey foot)</li>
    <li>Y[north]: Northing (US survey foot)<br />
Area of Use:</li>
    <li>name: United States (USA) - New York - counties of Bronx; Kings; Nassau; New York; Queens; Richmond; Suffolk.</li>
    <li>bounds: (-74.26, 40.47, -71.51, 41.3)<br />
Coordinate Operation:</li>
    <li>name: SPCS83 New York Long Island zone (US Survey feet)</li>
    <li>method: Lambert Conic Conformal (2SP)<br />
Datum: North American Datum 1983</li>
    <li>Ellipsoid: GRS 1980</li>
    <li>Prime Meridian: Greenwich</li>
  </ul>
</blockquote>

<p>But it’s in EPSG:2263, so let’s reproject it into 4326, and define a little function to save it as a file and also print the file size when we are tinkering with simplification later.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">save_geojson_print_size</span><span class="p">(</span><span class="n">gdf</span><span class="p">,</span> <span class="n">output_path</span><span class="p">):</span>
    <span class="n">gdf</span><span class="p">.</span><span class="n">to_file</span><span class="p">(</span><span class="n">output_path</span><span class="p">,</span> <span class="n">driver</span><span class="o">=</span><span class="s">"GeoJSON"</span><span class="p">)</span>
    <span class="n">size_mb</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">getsize</span><span class="p">(</span><span class="n">output_path</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="mi">1024</span> <span class="o">*</span><span class="mi">1024</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">output_path</span><span class="si">}</span><span class="s"> is </span><span class="si">{</span><span class="n">size_mb</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s"> MB"</span><span class="p">)</span>

<span class="n">output_path</span> <span class="o">=</span> <span class="s">"data/nycc.geojson"</span>
<span class="n">nycc_gdf</span> <span class="o">=</span> <span class="n">nycc_gdf</span><span class="p">.</span><span class="n">to_crs</span><span class="p">(</span><span class="s">"EPSG:4326"</span><span class="p">)</span>
<span class="n">save_geojson_print_size</span><span class="p">(</span><span class="n">nycc_gdf</span><span class="p">,</span> <span class="n">output_path</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>data/nycc.geojson is 5.54 MB</p>
</blockquote>

<h4 id="simplifying-geometries">Simplifying Geometries</h4>

<p>So we have to simplify the geometries by more than half. That actually takes a bit of tinkering around. Defining a new gdf on the copy of the original prevents making our iterations lossy (simplifying a geometry that’s already been simplified). We use <code class="language-plaintext highlighter-rouge">preserve_topology=True</code> to prevent self-intersecting and invalid geometries.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">simplified_gdf</span> <span class="o">=</span> <span class="n">nycc_gdf</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
<span class="n">simplified_gdf</span><span class="p">[</span><span class="s">"geometry"</span><span class="p">]</span> <span class="o">=</span> <span class="n">nycc_gdf</span><span class="p">[</span><span class="s">"geometry"</span><span class="p">].</span><span class="n">simplify</span><span class="p">(</span><span class="n">tolerance</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">preserve_topology</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  <span class="c1"># reduce this tolerance
</span><span class="n">save_geojson_print_size</span><span class="p">(</span><span class="n">simplified_gdf</span><span class="p">,</span> <span class="n">output_path</span><span class="p">)</span>
<span class="n">simplified_gdf</span><span class="p">.</span><span class="n">plot</span><span class="p">()</span>
</code></pre></div></div>

<blockquote>
  <p>data/nycc.geojson is 0.18 MB<br />
<img src="/assets/images/posts/nycc-map/waytoosimple.png" alt="Simplified NYC Council Districts" /></p>
</blockquote>

<p>And that is way too simplified! <code class="language-plaintext highlighter-rouge">tolerance=10</code> was too strong.</p>

<p>I found the best tolerance to be <code class="language-plaintext highlighter-rouge">tolerance = 0.000006</code>. And that’s it. Your geojson is ready to use.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">simplified_gdf</span> <span class="o">=</span> <span class="n">nycc_gdf</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
<span class="n">simplified_gdf</span><span class="p">[</span><span class="s">"geometry"</span><span class="p">]</span> <span class="o">=</span> <span class="n">nycc_gdf</span><span class="p">[</span><span class="s">"geometry"</span><span class="p">].</span><span class="n">simplify</span><span class="p">(</span><span class="n">tolerance</span><span class="o">=</span><span class="mf">0.000006</span><span class="p">,</span> <span class="n">preserve_topology</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  <span class="c1"># reduce this tolerance
</span><span class="n">save_geojson_print_size</span><span class="p">(</span><span class="n">simplified_gdf</span><span class="p">,</span> <span class="n">output_path</span><span class="p">)</span>
<span class="n">simplified_gdf</span><span class="p">.</span><span class="n">plot</span><span class="p">()</span>
</code></pre></div></div>

<blockquote>
  <p>data/nycc.geojson is 1.98 MB<br />
*<img src="/assets/images/posts/nycc-map/justright.png" alt="Simplified NYC Council Districts" />
*</p>
</blockquote>

<p>From there I just made a simple google sheet with all of the information for the endorsed candidates, including who to also_rank and dont_rank, if valid. Just make sure your first column’s header and formatting exactly match the GeoJSON feature identifier, and that each column uses the same datatype as its corresponding GeoJSON property.</p>

<p>Header and first row below</p>

<div style="overflow-x: auto;">
  <table class="spreadsheet-table">
    <thead>
      <tr>
        <th class="col-district">CounDist</th>
        <th class="col-endorsed">Endorsed</th>
        <th class="col-name">Name</th>
        <th class="col-incumbency">Incumbency</th>
        <th class="col-tagline">Tagline</th>
        <th class="col-photo">Photo URL</th>
        <th class="col-campaign">Campaign URL</th>
        <th class="col-neighborhoods">Neighborhoods</th>
        <th class="col-tooltip">Tooltip Blurb</th>
        <th class="col-also">Also Rank</th>
        <th class="col-dont">Don't Rank</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>1</td>
        <td>TRUE</td>
        <td>Jess Coleman</td>
        <td>Challenger</td>
        <td>Lawyer and Community Activist</td>
        <td><a href="https://i.imgur.com/0I0xwXY.png" target="_blank">Photo Link</a></td>
        <td><a href="https://www.jessfornewyork.com/" target="_blank">Campaign</a></td>
        <td>Battery Park, Financial District, Tribeca, Chinatown, Lower East Side, Soho</td>
        <td>Incumbent Christopher Marte voted against City of Yes, opposed affordable senior housing and safe havens, and fought outdoor dining and congestion pricing.</td>
        <td>Elizabeth Lewinsohn</td>
        <td>Chris Marte</td>
      </tr>
    </tbody>
  </table>
</div>

<p>Connect that as your data source and you can use html to customize the tooltip.</p>

<p>Datawrapper is an incredibly beautiful free tool for visualizations and it’s super easy to use, so I encourage everyone to go play around with it.</p>]]></content><author><name>Forrest Williams</name><email>samuel.forrest.williams@gmail.com</email></author><category term="maps" /><category term="python" /><category term="geopandas" /><category term="datawrapper" /><summary type="html"><![CDATA[]]></summary></entry></feed>